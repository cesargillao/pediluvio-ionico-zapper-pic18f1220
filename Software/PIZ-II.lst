CCS PCH C Compiler, Version 5.015, 5967               26-dic-17 15:25

               Filename:   D:\Proyectos\IonicPed + Zapper II\Software\PIZ-II.lst

               ROM used:   3390 bytes (83%)
                           Largest free fragment is 702
               RAM used:   34 (13%) at main() level
                           59 (23%) worst case
               Stack used: 9 locations (8 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0C9A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0096
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <18f1220.h> 
.................... //////////// Standard Header file for the PIC18F1220 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F1220 
*
00BE:  DATA 46,4F
00C0:  DATA 4F,54
00C2:  DATA 53,48
00C4:  DATA 4F,57
00C6:  DATA 45,52
00C8:  DATA 20,20
00CA:  DATA 20,4F
00CC:  DATA 4E,20
00CE:  DATA 00,00
00D0:  DATA 5A,41
00D2:  DATA 50,50
00D4:  DATA 45,52
00D6:  DATA 20,20
00D8:  DATA 20,20
00DA:  DATA 20,20
00DC:  DATA 20,4F
00DE:  DATA 4E,20
00E0:  DATA 00,00
00E2:  DATA 5A,41
00E4:  DATA 50,50
00E6:  DATA 45,52
00E8:  DATA 20,20
00EA:  DATA 20,20
00EC:  DATA 20,20
00EE:  DATA 20,4F
00F0:  DATA 46,46
00F2:  DATA 00,00
00F4:  DATA 54,4D
00F6:  DATA 50,20
00F8:  DATA 25,30
00FA:  DATA 32,64
00FC:  DATA 20,25
00FE:  DATA 30,32
0100:  DATA 64,20
0102:  DATA 20,20
0104:  DATA 25,31
0106:  DATA 2E,31
0108:  DATA 66,41
010A:  DATA 00,00
010C:  DATA 54,4D
010E:  DATA 50,20
0110:  DATA 25,30
0112:  DATA 32,64
0114:  DATA 3A,25
0116:  DATA 30,32
0118:  DATA 64,20
011A:  DATA 20,20
011C:  DATA 25,31
011E:  DATA 2E,31
0120:  DATA 66,41
0122:  DATA 00,00
0124:  DATA 45,58
0126:  DATA 43,45
0128:  DATA 53,4F
012A:  DATA 20,20
012C:  DATA 53,4F
012E:  DATA 4C,55
0130:  DATA 43,49
0132:  DATA 4F,4E
0134:  DATA 0A,20
0136:  DATA 20,20
0138:  DATA 20,20
013A:  DATA 20,25
013C:  DATA 31,2E
013E:  DATA 31,66
0140:  DATA 41,20
0142:  DATA 20,20
0144:  DATA 20,20
0146:  DATA 20,00
0148:  DATA 2A,20
014A:  DATA 20,46
014C:  DATA 4F,4F
014E:  DATA 54,53
0150:  DATA 48,4F
0152:  DATA 57,45
0154:  DATA 52,20
0156:  DATA 20,2A
0158:  DATA 0A,20
015A:  DATA 20,20
015C:  DATA 20,20
015E:  DATA 20,25
0160:  DATA 31,2E
0162:  DATA 31,66
0164:  DATA 41,00
0166:  DATA 0C,50
0168:  DATA 52,4F
016A:  DATA 43,45
016C:  DATA 53,4F
016E:  DATA 20,44
0170:  DATA 45,54
0172:  DATA 45,4E
0174:  DATA 49,44
0176:  DATA 4F,00
0178:  DATA 0C,20
017A:  DATA 46,49
017C:  DATA 4E,20
017E:  DATA 44,45
0180:  DATA 20,54
0182:  DATA 45,52
0184:  DATA 41,50
0186:  DATA 49,41
0188:  DATA 00,00
018A:  DATA 2A,20
018C:  DATA 5A,45
018E:  DATA 4C,45
0190:  DATA 43,54
0192:  DATA 52,4F
0194:  DATA 4E,20
0196:  DATA 43,41
0198:  DATA 20,2A
019A:  DATA 00,00
*
036A:  TBLRD*+
036C:  MOVF   FF5,F
036E:  BZ    0388
0370:  MOVFF  FF6,21
0374:  MOVFF  FF7,22
0378:  MOVFF  FF5,2E
037C:  RCALL  031A
037E:  MOVFF  21,FF6
0382:  MOVFF  22,FF7
0386:  BRA    036A
0388:  RETURN 0
038A:  MOVLW  8E
038C:  MOVWF  00
038E:  MOVFF  22,01
0392:  MOVFF  21,02
0396:  CLRF   03
0398:  MOVF   01,F
039A:  BNZ   03AE
039C:  MOVFF  02,01
03A0:  CLRF   02
03A2:  MOVLW  08
03A4:  SUBWF  00,F
03A6:  MOVF   01,F
03A8:  BNZ   03AE
03AA:  CLRF   00
03AC:  BRA    03BE
03AE:  BCF    FD8.0
03B0:  BTFSC  01.7
03B2:  BRA    03BC
03B4:  RLCF   02,F
03B6:  RLCF   01,F
03B8:  DECF   00,F
03BA:  BRA    03AE
03BC:  BCF    01.7
03BE:  GOTO   0628 (RETURN)
03C2:  MOVF   2E,W
03C4:  BTFSC  FD8.2
03C6:  BRA    04AA
03C8:  MOVWF  00
03CA:  MOVF   32,W
03CC:  BTFSC  FD8.2
03CE:  BRA    04AA
03D0:  ADDWF  00,F
03D2:  BNC   03DC
03D4:  MOVLW  81
03D6:  ADDWF  00,F
03D8:  BC    04AA
03DA:  BRA    03E4
03DC:  MOVLW  7F
03DE:  SUBWF  00,F
03E0:  BNC   04AA
03E2:  BZ    04AA
03E4:  MOVFF  2F,36
03E8:  MOVF   33,W
03EA:  XORWF  36,F
03EC:  BSF    2F.7
03EE:  BSF    33.7
03F0:  MOVF   31,W
03F2:  MULWF  35
03F4:  MOVFF  FF4,38
03F8:  MOVF   30,W
03FA:  MULWF  34
03FC:  MOVFF  FF4,03
0400:  MOVFF  FF3,37
0404:  MULWF  35
0406:  MOVF   FF3,W
0408:  ADDWF  38,F
040A:  MOVF   FF4,W
040C:  ADDWFC 37,F
040E:  MOVLW  00
0410:  ADDWFC 03,F
0412:  MOVF   31,W
0414:  MULWF  34
0416:  MOVF   FF3,W
0418:  ADDWF  38,F
041A:  MOVF   FF4,W
041C:  ADDWFC 37,F
041E:  MOVLW  00
0420:  CLRF   02
0422:  ADDWFC 03,F
0424:  ADDWFC 02,F
0426:  MOVF   2F,W
0428:  MULWF  35
042A:  MOVF   FF3,W
042C:  ADDWF  37,F
042E:  MOVF   FF4,W
0430:  ADDWFC 03,F
0432:  MOVLW  00
0434:  ADDWFC 02,F
0436:  MOVF   2F,W
0438:  MULWF  34
043A:  MOVF   FF3,W
043C:  ADDWF  03,F
043E:  MOVF   FF4,W
0440:  ADDWFC 02,F
0442:  MOVLW  00
0444:  CLRF   01
0446:  ADDWFC 01,F
0448:  MOVF   31,W
044A:  MULWF  33
044C:  MOVF   FF3,W
044E:  ADDWF  37,F
0450:  MOVF   FF4,W
0452:  ADDWFC 03,F
0454:  MOVLW  00
0456:  ADDWFC 02,F
0458:  ADDWFC 01,F
045A:  MOVF   30,W
045C:  MULWF  33
045E:  MOVF   FF3,W
0460:  ADDWF  03,F
0462:  MOVF   FF4,W
0464:  ADDWFC 02,F
0466:  MOVLW  00
0468:  ADDWFC 01,F
046A:  MOVF   2F,W
046C:  MULWF  33
046E:  MOVF   FF3,W
0470:  ADDWF  02,F
0472:  MOVF   FF4,W
0474:  ADDWFC 01,F
0476:  INCF   00,F
0478:  BTFSC  01.7
047A:  BRA    0486
047C:  RLCF   37,F
047E:  RLCF   03,F
0480:  RLCF   02,F
0482:  RLCF   01,F
0484:  DECF   00,F
0486:  MOVLW  00
0488:  BTFSS  37.7
048A:  BRA    04A0
048C:  INCF   03,F
048E:  ADDWFC 02,F
0490:  ADDWFC 01,F
0492:  MOVF   01,W
0494:  BNZ   04A0
0496:  MOVF   02,W
0498:  BNZ   04A0
049A:  MOVF   03,W
049C:  BNZ   04A0
049E:  INCF   00,F
04A0:  BTFSC  36.7
04A2:  BSF    01.7
04A4:  BTFSS  36.7
04A6:  BCF    01.7
04A8:  BRA    04B2
04AA:  CLRF   00
04AC:  CLRF   01
04AE:  CLRF   02
04B0:  CLRF   03
04B2:  RETURN 0
04B4:  MOVF   25,W
04B6:  BTFSC  FD8.2
04B8:  BRA    0604
04BA:  MOVWF  31
04BC:  MOVF   29,W
04BE:  BTFSC  FD8.2
04C0:  BRA    0604
04C2:  SUBWF  31,F
04C4:  BNC   04D0
04C6:  MOVLW  7F
04C8:  ADDWF  31,F
04CA:  BTFSC  FD8.0
04CC:  BRA    0604
04CE:  BRA    04DC
04D0:  MOVLW  81
04D2:  SUBWF  31,F
04D4:  BTFSS  FD8.0
04D6:  BRA    0604
04D8:  BTFSC  FD8.2
04DA:  BRA    0604
04DC:  MOVFF  31,00
04E0:  CLRF   01
04E2:  CLRF   02
04E4:  CLRF   03
04E6:  CLRF   30
04E8:  MOVFF  26,2F
04EC:  BSF    2F.7
04EE:  MOVFF  27,2E
04F2:  MOVFF  28,2D
04F6:  MOVLW  19
04F8:  MOVWF  31
04FA:  MOVF   2C,W
04FC:  SUBWF  2D,F
04FE:  BC    051A
0500:  MOVLW  01
0502:  SUBWF  2E,F
0504:  BC    051A
0506:  SUBWF  2F,F
0508:  BC    051A
050A:  SUBWF  30,F
050C:  BC    051A
050E:  INCF   30,F
0510:  INCF   2F,F
0512:  INCF   2E,F
0514:  MOVF   2C,W
0516:  ADDWF  2D,F
0518:  BRA    056A
051A:  MOVF   2B,W
051C:  SUBWF  2E,F
051E:  BC    0544
0520:  MOVLW  01
0522:  SUBWF  2F,F
0524:  BC    0544
0526:  SUBWF  30,F
0528:  BC    0544
052A:  INCF   30,F
052C:  INCF   2F,F
052E:  MOVF   2B,W
0530:  ADDWF  2E,F
0532:  MOVF   2C,W
0534:  ADDWF  2D,F
0536:  BNC   056A
0538:  INCF   2E,F
053A:  BNZ   056A
053C:  INCF   2F,F
053E:  BNZ   056A
0540:  INCF   30,F
0542:  BRA    056A
0544:  MOVF   2A,W
0546:  IORLW  80
0548:  SUBWF  2F,F
054A:  BC    0568
054C:  MOVLW  01
054E:  SUBWF  30,F
0550:  BC    0568
0552:  INCF   30,F
0554:  MOVF   2A,W
0556:  IORLW  80
0558:  ADDWF  2F,F
055A:  MOVF   2B,W
055C:  ADDWF  2E,F
055E:  BNC   0532
0560:  INCF   2F,F
0562:  BNZ   0532
0564:  INCF   30,F
0566:  BRA    0532
0568:  BSF    03.0
056A:  DECFSZ 31,F
056C:  BRA    0570
056E:  BRA    0586
0570:  BCF    FD8.0
0572:  RLCF   2D,F
0574:  RLCF   2E,F
0576:  RLCF   2F,F
0578:  RLCF   30,F
057A:  BCF    FD8.0
057C:  RLCF   03,F
057E:  RLCF   02,F
0580:  RLCF   01,F
0582:  RLCF   32,F
0584:  BRA    04FA
0586:  BTFSS  32.0
0588:  BRA    0596
058A:  BCF    FD8.0
058C:  RRCF   01,F
058E:  RRCF   02,F
0590:  RRCF   03,F
0592:  RRCF   32,F
0594:  BRA    059A
0596:  DECF   00,F
0598:  BZ    0604
059A:  BTFSC  32.7
059C:  BRA    05DA
059E:  BCF    FD8.0
05A0:  RLCF   2D,F
05A2:  RLCF   2E,F
05A4:  RLCF   2F,F
05A6:  RLCF   30,F
05A8:  MOVF   2C,W
05AA:  SUBWF  2D,F
05AC:  BC    05BC
05AE:  MOVLW  01
05B0:  SUBWF  2E,F
05B2:  BC    05BC
05B4:  SUBWF  2F,F
05B6:  BC    05BC
05B8:  SUBWF  30,F
05BA:  BNC   05F0
05BC:  MOVF   2B,W
05BE:  SUBWF  2E,F
05C0:  BC    05CC
05C2:  MOVLW  01
05C4:  SUBWF  2F,F
05C6:  BC    05CC
05C8:  SUBWF  30,F
05CA:  BNC   05F0
05CC:  MOVF   2A,W
05CE:  IORLW  80
05D0:  SUBWF  2F,F
05D2:  BC    05DA
05D4:  MOVLW  01
05D6:  SUBWF  30,F
05D8:  BNC   05F0
05DA:  INCF   03,F
05DC:  BNZ   05F0
05DE:  INCF   02,F
05E0:  BNZ   05F0
05E2:  INCF   01,F
05E4:  BNZ   05F0
05E6:  INCF   00,F
05E8:  BZ    0604
05EA:  RRCF   01,F
05EC:  RRCF   02,F
05EE:  RRCF   03,F
05F0:  MOVFF  26,31
05F4:  MOVF   2A,W
05F6:  XORWF  31,F
05F8:  BTFSS  31.7
05FA:  BRA    0600
05FC:  BSF    01.7
05FE:  BRA    060C
0600:  BCF    01.7
0602:  BRA    060C
0604:  CLRF   00
0606:  CLRF   01
0608:  CLRF   02
060A:  CLRF   03
060C:  GOTO   0672 (RETURN)
*
0684:  TBLRD*+
0686:  MOVFF  FF6,22
068A:  MOVFF  FF7,23
068E:  MOVFF  FF5,2E
0692:  RCALL  031A
0694:  MOVFF  22,FF6
0698:  MOVFF  23,FF7
069C:  DECFSZ 21,F
069E:  BRA    0684
06A0:  RETURN 0
06A2:  MOVF   2E,W
06A4:  SUBLW  B6
06A6:  MOVWF  2E
06A8:  CLRF   03
06AA:  MOVFF  2F,32
06AE:  BSF    2F.7
06B0:  BCF    FD8.0
06B2:  RRCF   2F,F
06B4:  RRCF   30,F
06B6:  RRCF   31,F
06B8:  RRCF   03,F
06BA:  RRCF   02,F
06BC:  RRCF   01,F
06BE:  RRCF   00,F
06C0:  DECFSZ 2E,F
06C2:  BRA    06B0
06C4:  BTFSS  32.7
06C6:  BRA    06DE
06C8:  COMF   00,F
06CA:  COMF   01,F
06CC:  COMF   02,F
06CE:  COMF   03,F
06D0:  INCF   00,F
06D2:  BTFSC  FD8.2
06D4:  INCF   01,F
06D6:  BTFSC  FD8.2
06D8:  INCF   02,F
06DA:  BTFSC  FD8.2
06DC:  INCF   03,F
06DE:  GOTO   07BE (RETURN)
06E2:  BTFSC  FD8.1
06E4:  BRA    06EC
06E6:  CLRF   FEA
06E8:  MOVLW  36
06EA:  MOVWF  FE9
06EC:  CLRF   00
06EE:  CLRF   01
06F0:  CLRF   02
06F2:  CLRF   03
06F4:  CLRF   36
06F6:  CLRF   37
06F8:  CLRF   38
06FA:  CLRF   39
06FC:  MOVF   35,W
06FE:  IORWF  34,W
0700:  IORWF  33,W
0702:  IORWF  32,W
0704:  BZ    075E
0706:  MOVLW  20
0708:  MOVWF  3A
070A:  BCF    FD8.0
070C:  RLCF   2E,F
070E:  RLCF   2F,F
0710:  RLCF   30,F
0712:  RLCF   31,F
0714:  RLCF   36,F
0716:  RLCF   37,F
0718:  RLCF   38,F
071A:  RLCF   39,F
071C:  MOVF   35,W
071E:  SUBWF  39,W
0720:  BNZ   0732
0722:  MOVF   34,W
0724:  SUBWF  38,W
0726:  BNZ   0732
0728:  MOVF   33,W
072A:  SUBWF  37,W
072C:  BNZ   0732
072E:  MOVF   32,W
0730:  SUBWF  36,W
0732:  BNC   0752
0734:  MOVF   32,W
0736:  SUBWF  36,F
0738:  MOVF   33,W
073A:  BTFSS  FD8.0
073C:  INCFSZ 33,W
073E:  SUBWF  37,F
0740:  MOVF   34,W
0742:  BTFSS  FD8.0
0744:  INCFSZ 34,W
0746:  SUBWF  38,F
0748:  MOVF   35,W
074A:  BTFSS  FD8.0
074C:  INCFSZ 35,W
074E:  SUBWF  39,F
0750:  BSF    FD8.0
0752:  RLCF   00,F
0754:  RLCF   01,F
0756:  RLCF   02,F
0758:  RLCF   03,F
075A:  DECFSZ 3A,F
075C:  BRA    070A
075E:  MOVFF  36,FEF
0762:  MOVFF  37,FEC
0766:  MOVFF  38,FEC
076A:  MOVFF  39,FEC
076E:  RETURN 0
0770:  MOVF   FE9,W
0772:  MOVWF  26
0774:  MOVF   25,W
0776:  MOVWF  28
0778:  BZ    07AC
077A:  MOVFF  24,31
077E:  MOVFF  23,30
0782:  MOVFF  22,2F
0786:  MOVFF  21,2E
078A:  CLRF   35
078C:  CLRF   34
078E:  MOVLW  20
0790:  MOVWF  33
0792:  MOVLW  82
0794:  MOVWF  32
0796:  RCALL  03C2
0798:  MOVFF  03,24
079C:  MOVFF  02,23
07A0:  MOVFF  01,22
07A4:  MOVFF  00,21
07A8:  DECFSZ 28,F
07AA:  BRA    077A
07AC:  MOVFF  24,31
07B0:  MOVFF  23,30
07B4:  MOVFF  22,2F
07B8:  MOVFF  21,2E
07BC:  BRA    06A2
07BE:  MOVFF  03,24
07C2:  MOVFF  02,23
07C6:  MOVFF  01,22
07CA:  MOVFF  00,21
07CE:  BTFSS  24.7
07D0:  BRA    07EC
07D2:  DECF   26,F
07D4:  BSF    26.5
07D6:  COMF   21,F
07D8:  COMF   22,F
07DA:  COMF   23,F
07DC:  COMF   24,F
07DE:  INCF   21,F
07E0:  BTFSC  FD8.2
07E2:  INCF   22,F
07E4:  BTFSC  FD8.2
07E6:  INCF   23,F
07E8:  BTFSC  FD8.2
07EA:  INCF   24,F
07EC:  MOVLW  3B
07EE:  MOVWF  2D
07F0:  MOVLW  9A
07F2:  MOVWF  2C
07F4:  MOVLW  CA
07F6:  MOVWF  2B
07F8:  CLRF   2A
07FA:  MOVLW  0A
07FC:  MOVWF  28
07FE:  MOVF   25,W
0800:  BTFSC  FD8.2
0802:  INCF   26,F
0804:  BSF    FD8.1
0806:  CLRF   FEA
0808:  MOVLW  21
080A:  MOVWF  FE9
080C:  MOVFF  24,31
0810:  MOVFF  23,30
0814:  MOVFF  22,2F
0818:  MOVFF  21,2E
081C:  MOVFF  2D,35
0820:  MOVFF  2C,34
0824:  MOVFF  2B,33
0828:  MOVFF  2A,32
082C:  RCALL  06E2
082E:  MOVF   01,W
0830:  MOVF   00,F
0832:  BNZ   0852
0834:  INCF   25,W
0836:  SUBWF  28,W
0838:  BZ    0852
083A:  MOVF   26,W
083C:  BZ    0856
083E:  ANDLW  0F
0840:  SUBWF  28,W
0842:  BZ    0846
0844:  BC    08B4
0846:  BTFSC  26.7
0848:  BRA    08B4
084A:  BTFSC  26.6
084C:  BRA    0856
084E:  MOVLW  20
0850:  BRA    08AC
0852:  MOVLW  20
0854:  ANDWF  26,F
0856:  BTFSS  26.5
0858:  BRA    0872
085A:  BCF    26.5
085C:  MOVF   25,W
085E:  BTFSS  FD8.2
0860:  DECF   26,F
0862:  MOVF   00,W
0864:  MOVWF  26
0866:  MOVLW  2D
0868:  MOVWF  2E
086A:  RCALL  031A
086C:  MOVF   26,W
086E:  MOVWF  00
0870:  CLRF   26
0872:  MOVF   25,W
0874:  SUBWF  28,W
0876:  BNZ   088C
0878:  MOVF   00,W
087A:  MOVWF  26
087C:  MOVLW  2E
087E:  MOVWF  2E
0880:  RCALL  031A
0882:  MOVF   26,W
0884:  MOVWF  00
0886:  MOVLW  20
0888:  ANDWF  26,F
088A:  MOVLW  00
088C:  MOVLW  30
088E:  BTFSS  26.5
0890:  BRA    08AC
0892:  BCF    26.5
0894:  MOVF   25,W
0896:  BTFSS  FD8.2
0898:  DECF   26,F
089A:  MOVF   00,W
089C:  MOVWF  26
089E:  MOVLW  2D
08A0:  MOVWF  2E
08A2:  RCALL  031A
08A4:  MOVF   26,W
08A6:  MOVWF  00
08A8:  CLRF   26
08AA:  MOVLW  30
08AC:  ADDWF  00,F
08AE:  MOVFF  00,2E
08B2:  RCALL  031A
08B4:  BCF    FD8.1
08B6:  MOVFF  2D,31
08BA:  MOVFF  2C,30
08BE:  MOVFF  2B,2F
08C2:  MOVFF  2A,2E
08C6:  CLRF   35
08C8:  CLRF   34
08CA:  CLRF   33
08CC:  MOVLW  0A
08CE:  MOVWF  32
08D0:  RCALL  06E2
08D2:  MOVFF  03,2D
08D6:  MOVFF  02,2C
08DA:  MOVFF  01,2B
08DE:  MOVFF  00,2A
08E2:  DECFSZ 28,F
08E4:  BRA    0804
08E6:  RETURN 0
08E8:  MOVFF  22,29
08EC:  MOVF   26,W
08EE:  XORWF  29,F
08F0:  BTFSS  29.7
08F2:  BRA    08FE
08F4:  BCF    FD8.2
08F6:  BCF    FD8.0
08F8:  BTFSC  22.7
08FA:  BSF    FD8.0
08FC:  BRA    095C
08FE:  MOVFF  22,29
0902:  MOVFF  25,2A
0906:  MOVF   21,W
0908:  SUBWF  2A,F
090A:  BZ    0918
090C:  BTFSS  29.7
090E:  BRA    095C
0910:  MOVF   FD8,W
0912:  XORLW  01
0914:  MOVWF  FD8
0916:  BRA    095C
0918:  MOVFF  26,2A
091C:  MOVF   22,W
091E:  SUBWF  2A,F
0920:  BZ    092E
0922:  BTFSS  29.7
0924:  BRA    095C
0926:  MOVF   FD8,W
0928:  XORLW  01
092A:  MOVWF  FD8
092C:  BRA    095C
092E:  MOVFF  27,2A
0932:  MOVF   23,W
0934:  SUBWF  2A,F
0936:  BZ    0944
0938:  BTFSS  29.7
093A:  BRA    095C
093C:  MOVF   FD8,W
093E:  XORLW  01
0940:  MOVWF  FD8
0942:  BRA    095C
0944:  MOVFF  28,2A
0948:  MOVF   24,W
094A:  SUBWF  2A,F
094C:  BZ    095A
094E:  BTFSS  29.7
0950:  BRA    095C
0952:  MOVF   FD8,W
0954:  XORLW  01
0956:  MOVWF  FD8
0958:  BRA    095C
095A:  BCF    FD8.0
095C:  GOTO   097E (RETURN)
*
0A1A:  MOVF   28,W
0A1C:  CLRF   01
0A1E:  SUBWF  27,W
0A20:  BC    0A28
0A22:  MOVFF  27,00
0A26:  BRA    0A40
0A28:  CLRF   00
0A2A:  MOVLW  08
0A2C:  MOVWF  29
0A2E:  RLCF   27,F
0A30:  RLCF   00,F
0A32:  MOVF   28,W
0A34:  SUBWF  00,W
0A36:  BTFSC  FD8.0
0A38:  MOVWF  00
0A3A:  RLCF   01,F
0A3C:  DECFSZ 29,F
0A3E:  BRA    0A2E
0A40:  RETURN 0
0A42:  MOVLW  20
0A44:  BTFSS  22.4
0A46:  MOVLW  30
0A48:  MOVWF  23
0A4A:  MOVFF  21,00
0A4E:  BTFSS  21.7
0A50:  BRA    0A62
0A52:  COMF   00,F
0A54:  INCF   00,F
0A56:  MOVFF  00,21
0A5A:  MOVLW  2D
0A5C:  MOVWF  23
0A5E:  BSF    22.7
0A60:  BSF    22.0
0A62:  MOVF   01,W
0A64:  MOVFF  21,27
0A68:  MOVLW  64
0A6A:  MOVWF  28
0A6C:  RCALL  0A1A
0A6E:  MOVFF  00,21
0A72:  MOVLW  30
0A74:  ADDWF  01,W
0A76:  MOVWF  24
0A78:  MOVFF  21,27
0A7C:  MOVLW  0A
0A7E:  MOVWF  28
0A80:  RCALL  0A1A
0A82:  MOVLW  30
0A84:  ADDWF  00,W
0A86:  MOVWF  26
0A88:  MOVLW  30
0A8A:  ADDWF  01,W
0A8C:  MOVWF  25
0A8E:  MOVFF  23,00
0A92:  MOVLW  30
0A94:  SUBWF  24,W
0A96:  BZ    0AA0
0A98:  BSF    22.1
0A9A:  BTFSC  22.7
0A9C:  BSF    22.2
0A9E:  BRA    0AC4
0AA0:  BTFSC  22.2
0AA2:  BRA    0AC4
0AA4:  MOVFF  23,24
0AA8:  BTFSC  22.1
0AAA:  BRA    0AB4
0AAC:  MOVLW  30
0AAE:  SUBWF  25,W
0AB0:  BZ    0ABA
0AB2:  BSF    22.0
0AB4:  BTFSC  22.7
0AB6:  BSF    22.1
0AB8:  BRA    0AC4
0ABA:  BTFSS  FD8.2
0ABC:  BSF    22.0
0ABE:  BTFSC  FD8.2
0AC0:  MOVFF  24,25
0AC4:  BTFSC  22.2
0AC6:  BRA    0AD2
0AC8:  BTFSC  22.1
0ACA:  BRA    0AD8
0ACC:  BTFSC  22.0
0ACE:  BRA    0ADE
0AD0:  BRA    0AE4
0AD2:  MOVFF  23,2E
0AD6:  RCALL  031A
0AD8:  MOVFF  24,2E
0ADC:  RCALL  031A
0ADE:  MOVFF  25,2E
0AE2:  RCALL  031A
0AE4:  MOVFF  26,2E
0AE8:  RCALL  031A
0AEA:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #fuses HS,NOWDT,NOMCLR,PROTECT 
.................... #use delay(internal=4M) 
*
019C:  CLRF   FEA
019E:  MOVLW  2F
01A0:  MOVWF  FE9
01A2:  MOVF   FEF,W
01A4:  BZ    01C2
01A6:  MOVLW  01
01A8:  MOVWF  01
01AA:  CLRF   00
01AC:  DECFSZ 00,F
01AE:  BRA    01AC
01B0:  DECFSZ 01,F
01B2:  BRA    01AA
01B4:  MOVLW  4A
01B6:  MOVWF  00
01B8:  DECFSZ 00,F
01BA:  BRA    01B8
01BC:  BRA    01BE
01BE:  DECFSZ FEF,F
01C0:  BRA    01A6
01C2:  RETURN 0
.................... #define LCD_DATA_PORT GETENV("SFR:PORTB") 
.................... #define LCD_RS_PIN PIN_B0 
.................... #define LCD_RW_PIN PIN_B1 
.................... #define LCD_ENABLE_PIN PIN_A3 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
01EC:  MOVLW  0F
01EE:  ANDWF  F93,W
01F0:  IORLW  F0
01F2:  MOVWF  F93
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
01F4:  BSF    F8A.1
01F6:  BCF    F93.1
....................    delay_cycles(1); 
01F8:  NOP   
....................    lcd_output_enable(1); 
01FA:  BSF    F89.3
01FC:  BCF    F92.3
....................    delay_cycles(1); 
01FE:  NOP   
....................    high = lcd_read_nibble(); 
0200:  RCALL  01E0
0202:  MOVFF  01,36
....................        
....................    lcd_output_enable(0); 
0206:  BCF    F89.3
0208:  BCF    F92.3
....................    delay_cycles(1); 
020A:  NOP   
....................    lcd_output_enable(1); 
020C:  BSF    F89.3
020E:  BCF    F92.3
....................    delay_us(1); 
0210:  NOP   
....................    low = lcd_read_nibble(); 
0212:  RCALL  01E0
0214:  MOVFF  01,35
....................        
....................    lcd_output_enable(0); 
0218:  BCF    F89.3
021A:  BCF    F92.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
021C:  MOVLW  0F
021E:  ANDWF  F93,W
0220:  MOVWF  F93
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0222:  SWAPF  36,W
0224:  MOVWF  00
0226:  MOVLW  F0
0228:  ANDWF  00,F
022A:  MOVF   00,W
022C:  IORWF  35,W
022E:  MOVWF  01
0230:  GOTO   0240 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
01E0:  MOVF   F81,W
01E2:  MOVWF  00
01E4:  SWAPF  00,W
01E6:  ANDLW  0F
01E8:  MOVWF  01
....................   #endif 
01EA:  RETURN 0
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
01C4:  SWAPF  36,W
01C6:  ANDLW  F0
01C8:  MOVWF  00
01CA:  MOVLW  0F
01CC:  ANDWF  F8A,W
01CE:  IORWF  00,W
01D0:  MOVWF  F8A
....................   #endif 
....................        
....................    delay_cycles(1); 
01D2:  NOP   
....................    lcd_output_enable(1); 
01D4:  BSF    F89.3
01D6:  BCF    F92.3
....................    delay_us(2); 
01D8:  BRA    01DA
....................    lcd_output_enable(0); 
01DA:  BCF    F89.3
01DC:  BCF    F92.3
01DE:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0234:  BCF    F92.3
....................    lcd_rs_tris(); 
0236:  BCF    F93.0
....................    lcd_rw_tris(); 
0238:  BCF    F93.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
023A:  BCF    F8A.0
023C:  BCF    F93.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
023E:  BRA    01EC
0240:  MOVFF  01,35
0244:  BTFSC  01.7
0246:  BRA    023E
....................    lcd_output_rs(address); 
0248:  MOVF   33,F
024A:  BNZ   0250
024C:  BCF    F8A.0
024E:  BRA    0252
0250:  BSF    F8A.0
0252:  BCF    F93.0
....................    delay_cycles(1); 
0254:  NOP   
....................    lcd_output_rw(0); 
0256:  BCF    F8A.1
0258:  BCF    F93.1
....................    delay_cycles(1); 
025A:  NOP   
....................    lcd_output_enable(0); 
025C:  BCF    F89.3
025E:  BCF    F92.3
....................    lcd_send_nibble(n >> 4); 
0260:  SWAPF  34,W
0262:  MOVWF  35
0264:  MOVLW  0F
0266:  ANDWF  35,F
0268:  MOVFF  35,36
026C:  RCALL  01C4
....................    lcd_send_nibble(n & 0xf); 
026E:  MOVF   34,W
0270:  ANDLW  0F
0272:  MOVWF  35
0274:  MOVWF  36
0276:  RCALL  01C4
0278:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
027A:  MOVLW  28
027C:  MOVWF  22
027E:  MOVLW  0C
0280:  MOVWF  23
0282:  MOVLW  01
0284:  MOVWF  24
0286:  MOVLW  06
0288:  MOVWF  25
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
028A:  BCF    F89.3
028C:  BCF    F92.3
....................    lcd_output_rs(0); 
028E:  BCF    F8A.0
0290:  BCF    F93.0
....................    lcd_output_rw(0); 
0292:  BCF    F8A.1
0294:  BCF    F93.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0296:  MOVLW  0F
0298:  ANDWF  F93,W
029A:  MOVWF  F93
....................   #endif 
....................    lcd_enable_tris(); 
029C:  BCF    F92.3
....................    lcd_rs_tris(); 
029E:  BCF    F93.0
....................    lcd_rw_tris(); 
02A0:  BCF    F93.1
....................  #endif 
....................      
....................    delay_ms(15); 
02A2:  MOVLW  0F
02A4:  MOVWF  2F
02A6:  RCALL  019C
....................    for(i=1;i<=3;++i) 
02A8:  MOVLW  01
02AA:  MOVWF  21
02AC:  MOVF   21,W
02AE:  SUBLW  03
02B0:  BNC   02C2
....................    { 
....................        lcd_send_nibble(3); 
02B2:  MOVLW  03
02B4:  MOVWF  36
02B6:  RCALL  01C4
....................        delay_ms(5); 
02B8:  MOVLW  05
02BA:  MOVWF  2F
02BC:  RCALL  019C
02BE:  INCF   21,F
02C0:  BRA    02AC
....................    } 
....................     
....................    lcd_send_nibble(2); 
02C2:  MOVLW  02
02C4:  MOVWF  36
02C6:  RCALL  01C4
....................    delay_ms(5); 
02C8:  MOVLW  05
02CA:  MOVWF  2F
02CC:  RCALL  019C
....................    for(i=0;i<=3;++i) 
02CE:  CLRF   21
02D0:  MOVF   21,W
02D2:  SUBLW  03
02D4:  BNC   02F4
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
02D6:  CLRF   03
02D8:  MOVF   21,W
02DA:  ADDLW  22
02DC:  MOVWF  FE9
02DE:  MOVLW  00
02E0:  ADDWFC 03,W
02E2:  MOVWF  FEA
02E4:  MOVFF  FEF,26
02E8:  CLRF   33
02EA:  MOVFF  26,34
02EE:  RCALL  0234
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02F0:  INCF   21,F
02F2:  BRA    02D0
02F4:  GOTO   0CB6 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
02F8:  DECFSZ 30,W
02FA:  BRA    02FE
02FC:  BRA    0304
....................       address=LCD_LINE_TWO; 
02FE:  MOVLW  40
0300:  MOVWF  31
0302:  BRA    0306
....................    else 
....................       address=0; 
0304:  CLRF   31
....................       
....................    address+=x-1; 
0306:  MOVLW  01
0308:  SUBWF  2F,W
030A:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address); 
030C:  MOVF   31,W
030E:  IORLW  80
0310:  MOVWF  32
0312:  CLRF   33
0314:  MOVWF  34
0316:  RCALL  0234
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0318:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
031A:  MOVF   2E,W
031C:  XORLW  07
031E:  BZ    032E
0320:  XORLW  0B
0322:  BZ    0338
0324:  XORLW  06
0326:  BZ    0348
0328:  XORLW  02
032A:  BZ    0354
032C:  BRA    035E
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
032E:  MOVLW  01
0330:  MOVWF  2F
0332:  MOVWF  30
0334:  RCALL  02F8
0336:  BRA    0368
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0338:  CLRF   33
033A:  MOVLW  01
033C:  MOVWF  34
033E:  RCALL  0234
....................                      delay_ms(2); 
0340:  MOVLW  02
0342:  MOVWF  2F
0344:  RCALL  019C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0346:  BRA    0368
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0348:  MOVLW  01
034A:  MOVWF  2F
034C:  MOVLW  02
034E:  MOVWF  30
0350:  RCALL  02F8
0352:  BRA    0368
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0354:  CLRF   33
0356:  MOVLW  10
0358:  MOVWF  34
035A:  RCALL  0234
035C:  BRA    0368
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
035E:  MOVLW  01
0360:  MOVWF  33
0362:  MOVFF  2E,34
0366:  RCALL  0234
....................      #endif 
....................    } 
0368:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #bit Buzzer     = 0xF80.2 
.................... #bit BInicio    = 0xF80.4 
.................... #bit BZapper    = 0xF80.5 
.................... #bit Rele       = 0xF81.2 
....................  
.................... int1  SegPar,Zapper,PWM,Operando; 
.................... int   C,S,M,i; 
.................... int16 Amp; 
.................... float Amperaje; 
....................  
.................... #int_timer0 
.................... void timer()  
.................... { 
....................    if(Operando) 
*
0096:  BTFSS  16.3
0098:  BRA    00B8
....................    { 
....................       set_timer0(61); 
009A:  CLRF   FD7
009C:  MOVLW  3D
009E:  MOVWF  FD6
....................       if(C==0) 
00A0:  MOVF   17,F
00A2:  BNZ   00B6
....................       { 
....................          C=20; 
00A4:  MOVLW  14
00A6:  MOVWF  17
....................          SegPar++; 
00A8:  BTG    16.0
....................          if(S==0) 
00AA:  MOVF   18,F
00AC:  BNZ   00B4
....................          { 
....................             S=60; 
00AE:  MOVLW  3C
00B0:  MOVWF  18
....................             M--; 
00B2:  DECF   19,F
....................          } 
....................          S--; 
00B4:  DECF   18,F
....................       } 
....................       C--; 
00B6:  DECF   17,F
....................    } 
00B8:  BCF    FF2.2
00BA:  GOTO   0054
.................... } 
.................... void Pitido() 
.................... { 
....................    for(i=0;i<20;i++) 
*
0A00:  CLRF   1A
0A02:  MOVF   1A,W
0A04:  SUBLW  13
0A06:  BNC   0A18
....................    { 
....................       output_toggle(PIN_A2); 
0A08:  BCF    F92.2
0A0A:  BTG    F89.2
....................       delay_ms(2); 
0A0C:  MOVLW  02
0A0E:  MOVWF  2F
0A10:  CALL   019C
0A14:  INCF   1A,F
0A16:  BRA    0A02
....................    } 
0A18:  RETURN 0
.................... } 
.................... void LeerADC() 
.................... { 
....................    Amp=read_adc(); 
*
0610:  BSF    FC2.1
0612:  BTFSC  FC2.1
0614:  BRA    0612
0616:  MOVFF  FC3,1B
061A:  MOVFF  FC4,1C
....................    Amperaje=(Amp*5.0)/1024.0; 
061E:  MOVFF  1C,22
0622:  MOVFF  1B,21
0626:  BRA    038A
0628:  MOVFF  03,31
062C:  MOVFF  02,30
0630:  MOVFF  01,2F
0634:  MOVFF  00,2E
0638:  CLRF   35
063A:  CLRF   34
063C:  MOVLW  20
063E:  MOVWF  33
0640:  MOVLW  81
0642:  MOVWF  32
0644:  RCALL  03C2
0646:  MOVFF  03,24
064A:  MOVFF  02,23
064E:  MOVFF  01,22
0652:  MOVFF  00,21
0656:  MOVFF  03,28
065A:  MOVFF  02,27
065E:  MOVFF  01,26
0662:  MOVFF  00,25
0666:  CLRF   2C
0668:  CLRF   2B
066A:  CLRF   2A
066C:  MOVLW  89
066E:  MOVWF  29
0670:  BRA    04B4
0672:  MOVFF  03,20
0676:  MOVFF  02,1F
067A:  MOVFF  01,1E
067E:  MOVFF  00,1D
0682:  RETURN 0
.................... } 
.................... void Mostrar() 
.................... { 
....................    lcd_gotoxy(1,1); 
*
0AEC:  MOVLW  01
0AEE:  MOVWF  2F
0AF0:  MOVWF  30
0AF2:  RCALL  02F8
....................    if(SegPar) 
0AF4:  BTFSS  16.0
0AF6:  BRA    0B02
....................    { 
....................       printf(lcd_putc,"FOOTSHOWER   ON "); 
0AF8:  MOVLW  BE
0AFA:  MOVWF  FF6
0AFC:  MOVLW  00
0AFE:  MOVWF  FF7
0B00:  RCALL  036A
....................    } 
....................    if(!SegPar) 
0B02:  BTFSC  16.0
0B04:  BRA    0B50
....................    { 
....................       if(Zapper) 
0B06:  BTFSS  16.1
0B08:  BRA    0B34
....................       { 
....................          printf(lcd_putc,"ZAPPER       ON "); 
0B0A:  MOVLW  D0
0B0C:  MOVWF  FF6
0B0E:  MOVLW  00
0B10:  MOVWF  FF7
0B12:  RCALL  036A
....................          if(!PWM) 
0B14:  BTFSC  16.2
0B16:  BRA    0B34
....................          { 
....................             setup_timer_2(T2_DIV_BY_1,32,1);   // PWM frequency to 121.2KHz 
0B18:  MOVLW  00
0B1A:  IORLW  04
0B1C:  MOVWF  FCA
0B1E:  MOVLW  20
0B20:  MOVWF  FCB
....................             set_pwm1_duty(128); 
0B22:  MOVLW  80
0B24:  MOVWF  FBE
....................             setup_ccp1(CCP_PWM); 
0B26:  BCF    F93.3
0B28:  BCF    F8A.3
0B2A:  MOVLW  0C
0B2C:  MOVWF  FBD
0B2E:  CLRF   FB7
0B30:  CLRF   FB6
....................             PWM=1; 
0B32:  BSF    16.2
....................          } 
....................       } 
....................       if(!Zapper) 
0B34:  BTFSC  16.1
0B36:  BRA    0B50
....................       { 
....................          printf(lcd_putc,"ZAPPER       OFF"); 
0B38:  MOVLW  E2
0B3A:  MOVWF  FF6
0B3C:  MOVLW  00
0B3E:  MOVWF  FF7
0B40:  RCALL  036A
....................          setup_ccp1(CCP_OFF); 
0B42:  MOVLW  F0
0B44:  ANDWF  FBD,F
....................          setup_timer_2(T2_DISABLED,1,1); 
0B46:  MOVLW  00
0B48:  MOVWF  FCA
0B4A:  MOVLW  01
0B4C:  MOVWF  FCB
....................          PWM=0; 
0B4E:  BCF    16.2
....................       } 
....................    } 
....................    lcd_gotoxy(1,2); 
0B50:  MOVLW  01
0B52:  MOVWF  2F
0B54:  MOVLW  02
0B56:  MOVWF  30
0B58:  CALL   02F8
....................    if(C>10) 
0B5C:  MOVF   17,W
0B5E:  SUBLW  0A
0B60:  BC    0BBC
....................    { 
....................       printf(lcd_putc,"TMP %02d %02d   %1.1fA",M,S,Amperaje); 
0B62:  MOVLW  F4
0B64:  MOVWF  FF6
0B66:  MOVLW  00
0B68:  MOVWF  FF7
0B6A:  MOVLW  04
0B6C:  MOVWF  21
0B6E:  RCALL  0684
0B70:  MOVFF  19,21
0B74:  MOVLW  01
0B76:  MOVWF  22
0B78:  RCALL  0A42
0B7A:  MOVLW  20
0B7C:  MOVWF  2E
0B7E:  CALL   031A
0B82:  MOVFF  18,21
0B86:  MOVLW  01
0B88:  MOVWF  22
0B8A:  RCALL  0A42
0B8C:  MOVLW  01
0B8E:  MOVWF  FF6
0B90:  MOVLW  01
0B92:  MOVWF  FF7
0B94:  MOVLW  03
0B96:  MOVWF  21
0B98:  RCALL  0684
0B9A:  MOVLW  89
0B9C:  MOVWF  FE9
0B9E:  MOVFF  20,24
0BA2:  MOVFF  1F,23
0BA6:  MOVFF  1E,22
0BAA:  MOVFF  1D,21
0BAE:  MOVLW  01
0BB0:  MOVWF  25
0BB2:  RCALL  0770
0BB4:  MOVLW  41
0BB6:  MOVWF  2E
0BB8:  CALL   031A
....................    } 
....................    if(C<10) 
0BBC:  MOVF   17,W
0BBE:  SUBLW  09
0BC0:  BNC   0C1C
....................    { 
....................       printf(lcd_putc,"TMP %02d:%02d   %1.1fA",M,S,Amperaje); 
0BC2:  MOVLW  0C
0BC4:  MOVWF  FF6
0BC6:  MOVLW  01
0BC8:  MOVWF  FF7
0BCA:  MOVLW  04
0BCC:  MOVWF  21
0BCE:  RCALL  0684
0BD0:  MOVFF  19,21
0BD4:  MOVLW  01
0BD6:  MOVWF  22
0BD8:  RCALL  0A42
0BDA:  MOVLW  3A
0BDC:  MOVWF  2E
0BDE:  CALL   031A
0BE2:  MOVFF  18,21
0BE6:  MOVLW  01
0BE8:  MOVWF  22
0BEA:  RCALL  0A42
0BEC:  MOVLW  19
0BEE:  MOVWF  FF6
0BF0:  MOVLW  01
0BF2:  MOVWF  FF7
0BF4:  MOVLW  03
0BF6:  MOVWF  21
0BF8:  RCALL  0684
0BFA:  MOVLW  89
0BFC:  MOVWF  FE9
0BFE:  MOVFF  20,24
0C02:  MOVFF  1F,23
0C06:  MOVFF  1E,22
0C0A:  MOVFF  1D,21
0C0E:  MOVLW  01
0C10:  MOVWF  25
0C12:  RCALL  0770
0C14:  MOVLW  41
0C16:  MOVWF  2E
0C18:  CALL   031A
....................    } 
0C1C:  GOTO   0C8C (RETURN)
.................... } 
.................... void Exceso() 
.................... { 
....................    while(Amperaje>1.4) // EXCESO DE SOLUCION 
*
0960:  MOVLW  33
0962:  MOVWF  24
0964:  MOVWF  23
0966:  MOVWF  22
0968:  MOVLW  7F
096A:  MOVWF  21
096C:  MOVFF  20,28
0970:  MOVFF  1F,27
0974:  MOVFF  1E,26
0978:  MOVFF  1D,25
097C:  BRA    08E8
097E:  BNC   09C2
....................    { 
....................       lcd_gotoxy(1,1); 
0980:  MOVLW  01
0982:  MOVWF  2F
0984:  MOVWF  30
0986:  RCALL  02F8
....................       LeerADC(); 
0988:  RCALL  0610
....................       printf(lcd_putc,"EXCESO  SOLUCION\n      %1.1fA      ",Amperaje); 
098A:  MOVLW  24
098C:  MOVWF  FF6
098E:  MOVLW  01
0990:  MOVWF  FF7
0992:  MOVLW  17
0994:  MOVWF  21
0996:  RCALL  0684
0998:  MOVLW  89
099A:  MOVWF  FE9
099C:  MOVFF  20,24
09A0:  MOVFF  1F,23
09A4:  MOVFF  1E,22
09A8:  MOVFF  1D,21
09AC:  MOVLW  01
09AE:  MOVWF  25
09B0:  RCALL  0770
09B2:  MOVLW  40
09B4:  MOVWF  FF6
09B6:  MOVLW  01
09B8:  MOVWF  FF7
09BA:  MOVLW  07
09BC:  MOVWF  21
09BE:  RCALL  0684
09C0:  BRA    0960
....................       //Pitido(); 
....................    } 
09C2:  RETURN 0
.................... } 
.................... void Pediluvio() 
.................... { 
....................    lcd_gotoxy(1,1); 
09C4:  MOVLW  01
09C6:  MOVWF  2F
09C8:  MOVWF  30
09CA:  RCALL  02F8
....................    printf(lcd_putc,"*  FOOTSHOWER  *\n      %1.1fA",Amperaje); 
09CC:  MOVLW  48
09CE:  MOVWF  FF6
09D0:  MOVLW  01
09D2:  MOVWF  FF7
09D4:  MOVLW  17
09D6:  MOVWF  21
09D8:  RCALL  0684
09DA:  MOVLW  89
09DC:  MOVWF  FE9
09DE:  MOVFF  20,24
09E2:  MOVFF  1F,23
09E6:  MOVFF  1E,22
09EA:  MOVFF  1D,21
09EE:  MOVLW  01
09F0:  MOVWF  25
09F2:  RCALL  0770
09F4:  MOVLW  41
09F6:  MOVWF  2E
09F8:  RCALL  031A
....................    Exceso(); 
09FA:  RCALL  0960
09FC:  GOTO   0D24 (RETURN)
.................... } 
.................... void Estado() 
.................... { 
....................    if(!BInicio) // Detenido 
*
0C20:  BTFSC  F80.4
0C22:  BRA    0C48
....................    { 
....................       while(!BInicio){} 
0C24:  BTFSS  F80.4
0C26:  BRA    0C24
....................       Operando=0; 
0C28:  BCF    16.3
....................       Pitido(); 
0C2A:  RCALL  0A00
....................       printf(lcd_putc,"\fPROCESO DETENIDO"); 
0C2C:  MOVLW  66
0C2E:  MOVWF  FF6
0C30:  MOVLW  01
0C32:  MOVWF  FF7
0C34:  CALL   036A
....................       delay_ms(2000); 
0C38:  MOVLW  08
0C3A:  MOVWF  21
0C3C:  MOVLW  FA
0C3E:  MOVWF  2F
0C40:  CALL   019C
0C44:  DECFSZ 21,F
0C46:  BRA    0C3C
....................    } 
....................    if(!BZapper) // Zapper Apagado/Encendido 
0C48:  BTFSC  F80.5
0C4A:  BRA    0C54
....................    { 
....................       Pitido(); 
0C4C:  RCALL  0A00
....................       Zapper++; 
0C4E:  BTG    16.1
....................       while(!BZapper){} 
0C50:  BTFSS  F80.5
0C52:  BRA    0C50
....................    } 
0C54:  GOTO   0C8E (RETURN)
.................... } 
.................... void Fin() 
.................... { 
....................    if(!S && !M) 
0C58:  MOVF   18,F
0C5A:  BNZ   0C82
0C5C:  MOVF   19,F
0C5E:  BNZ   0C82
....................    { 
....................       Rele=0; 
0C60:  BCF    F81.2
....................       printf(lcd_putc,"\f FIN DE TERAPIA"); 
0C62:  MOVLW  78
0C64:  MOVWF  FF6
0C66:  MOVLW  01
0C68:  MOVWF  FF7
0C6A:  CALL   036A
....................       Pitido(); 
0C6E:  RCALL  0A00
....................       delay_ms(3000); 
0C70:  MOVLW  0C
0C72:  MOVWF  21
0C74:  MOVLW  FA
0C76:  MOVWF  2F
0C78:  CALL   019C
0C7C:  DECFSZ 21,F
0C7E:  BRA    0C74
....................       Reset_cpu(); 
0C80:  RESET
....................    } 
0C82:  GOTO   0C94 (RETURN)
.................... } 
.................... void PediluvioOperando() 
.................... { 
....................    while(Operando) 
0C86:  BTFSS  16.3
0C88:  BRA    0C96
....................    { 
....................       Mostrar(); 
0C8A:  BRA    0AEC
....................       Estado(); 
0C8C:  BRA    0C20
....................       LeerADC(); 
0C8E:  RCALL  0610
....................       Exceso(); 
0C90:  RCALL  0960
....................       Fin(); 
0C92:  BRA    0C58
0C94:  BRA    0C86
....................    } 
0C96:  GOTO   0D3E (RETURN)
.................... } 
.................... void main() 
0C9A:  CLRF   FF8
0C9C:  BCF    FD0.7
0C9E:  BSF    07.7
0CA0:  MOVLW  62
0CA2:  MOVWF  FD3
0CA4:  MOVF   FD3,W
0CA6:  BCF    FC2.6
0CA8:  BCF    FC2.7
0CAA:  MOVF   FC1,W
0CAC:  ANDLW  80
0CAE:  IORLW  7F
0CB0:  MOVWF  FC1
.................... { 
....................    lcd_init(); 
0CB2:  GOTO   027A
....................    set_tris_a(0b00110001);       // Puerto A como Entrada 
0CB6:  MOVLW  31
0CB8:  MOVWF  F92
....................    set_tris_b(0x00);             // Puerto B como Salida 
0CBA:  MOVLW  00
0CBC:  MOVWF  F93
....................    output_b(0x00);               // Puerto B inicia en cero 
0CBE:  CLRF   F93
0CC0:  CLRF   F8A
....................    setup_adc_ports(sAN0);        // Habilito AN0 como pueto ADC 
0CC2:  BCF    FC2.6
0CC4:  BCF    FC2.7
0CC6:  MOVF   FC1,W
0CC8:  ANDLW  80
0CCA:  IORLW  7E
0CCC:  MOVWF  FC1
....................    setup_adc(adc_clock_internal|adc_tad_mul_0);   // ADC con fuente de reloj interno 
0CCE:  MOVF   FC0,W
0CD0:  ANDLW  C0
0CD2:  IORLW  07
0CD4:  MOVWF  FC0
0CD6:  BSF    FC0.7
0CD8:  BSF    FC2.0
....................    set_adc_channel(0); 
0CDA:  MOVLW  00
0CDC:  MOVWF  01
0CDE:  MOVF   FC2,W
0CE0:  ANDLW  E3
0CE2:  IORWF  01,W
0CE4:  MOVWF  FC2
....................    enable_interrupts(global|int_timer0); 
0CE6:  MOVLW  E0
0CE8:  IORWF  FF2,F
....................    setup_timer_0(T0_INTERNAL|T0_DIV_256|T0_8_BIT); 
0CEA:  MOVLW  C7
0CEC:  MOVWF  FD5
....................    set_timer0(61); 
0CEE:  CLRF   FD7
0CF0:  MOVLW  3D
0CF2:  MOVWF  FD6
....................    Operando=0; 
0CF4:  BCF    16.3
....................    SegPar=0; 
0CF6:  BCF    16.0
....................    Zapper=1; 
0CF8:  BSF    16.1
....................    Rele=1; 
0CFA:  BSF    F81.2
....................    printf(lcd_putc,"* ZELECTRON CA *"); 
0CFC:  MOVLW  8A
0CFE:  MOVWF  FF6
0D00:  MOVLW  01
0D02:  MOVWF  FF7
0D04:  CALL   036A
....................    delay_ms(1500); 
0D08:  MOVLW  06
0D0A:  MOVWF  21
0D0C:  MOVLW  FA
0D0E:  MOVWF  2F
0D10:  CALL   019C
0D14:  DECFSZ 21,F
0D16:  BRA    0D0C
....................    printf(lcd_putc,"\f"); 
0D18:  MOVLW  0C
0D1A:  MOVWF  2E
0D1C:  CALL   031A
....................    while(true) 
....................    { 
....................       LeerADC(); 
0D20:  RCALL  0610
....................       Pediluvio(); 
0D22:  BRA    09C4
....................       if(!BInicio) 
0D24:  BTFSC  F80.4
0D26:  BRA    0D3E
....................       { 
....................          Pitido(); 
0D28:  RCALL  0A00
....................          while(!BInicio){} 
0D2A:  BTFSS  F80.4
0D2C:  BRA    0D2A
....................          C=S=PWM=0; 
0D2E:  BCF    16.2
0D30:  CLRF   18
0D32:  MOVFF  18,17
....................          M=60; 
0D36:  MOVLW  3C
0D38:  MOVWF  19
....................          Operando=1; 
0D3A:  BSF    16.3
....................          PediluvioOperando(); 
0D3C:  BRA    0C86
....................       } 
0D3E:  BRA    0D20
....................    } 
.................... } 
0D40:  SLEEP 

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 1E0E   PUT BROWNOUT NOWDT WDT32768
   Word  3: 0000   NOMCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C000   PROTECT NOCPB NOCPD
   Word  6: E003   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 4003   NOEBTR NOEBTRB
